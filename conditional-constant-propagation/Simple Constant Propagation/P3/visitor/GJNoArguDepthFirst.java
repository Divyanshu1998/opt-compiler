//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // for(int i=0;i<finalOutput.size();i++){
      //    System.out.println(finalOutput.get(i));
      // }

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   ArrayList<String> finalOutput = new ArrayList<>();
   Map<String,String> mainMethodMap = new HashMap<>();
   public R visit(MainClass n) {
      stackOfMaps.push(mainMethodMap);
      R _ret=null;
      String opClass;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      opClass = "class " + n.f1.f0.toString()+" {";
      finalOutput.add(opClass); 
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      opClass = "public static void main(String[] " + n.f11.f0.toString()+") {";
      finalOutput.add(opClass);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      opClass = "}";
      finalOutput.add(opClass);
      finalOutput.add(opClass);
      n.f17.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    boolean fieldVars = false;
   public R visit(ClassDeclaration n) {
      R _ret=null;
      String opClass;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      opClass = "class "+n.f1.f0.toString()+" {";
      finalOutput.add(opClass);
      fieldVars = true;
      n.f3.accept(this);
      fieldVars = false;
      n.f4.accept(this);
      n.f5.accept(this);
      opClass = "}";
      finalOutput.add(opClass);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      String opExtends;
      opExtends = "class "+n.f1.f0.toString()+" extends "+n.f3.f0.toString()+" {";
      finalOutput.add(opExtends);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      fieldVars = true;
      n.f5.accept(this);
      fieldVars = false;
      n.f6.accept(this);
      n.f7.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      n.f1.accept(this);
      if(methodVars ==true) {
         String varName = n.f1.f0.toString();
         mapOfVars.put(varName, "#TOP");
      }
      if(fieldVars == true){
         String varName = n.f1.f0.toString();
         mapOfVars.put(varName, "#TOP");
      }
      String opVars;
      opVars =(String)_ret + " " + n.f1.f0.toString()+";";
      n.f2.accept(this);
      finalOutput.add(opVars);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
    Map<String, String> mapOfVars = new HashMap<>();
    
   // Map<String, String> mapOfElse = new HashMap<>();

    boolean methodVars = false;
   public R visit(MethodDeclaration n) {
      stackOfMaps.push(mapOfVars);
      R _ret=null;
      String opMethod;
      n.f0.accept(this);
      String typeVar = (String)n.f1.accept(this);
      opMethod = "public "+typeVar +" "+n.f2.f0.toString()+ " (";
      finalOutput.add(opMethod);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);

      opMethod = finalOutput.getLast() + " ) {" ;
      finalOutput.set(finalOutput.size()-1, opMethod);
      methodVars = true;
      n.f7.accept(this);
      methodVars = false;
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String retValue = mapTop.get(n.f10.f0.toString());
      if(retValue.equals("#BOT")){

         opMethod = "return "+n.f10.f0.toString()+";";
         finalOutput.add(opMethod);
      }
      else {
         opMethod = "return "+retValue+";";
         finalOutput.add(opMethod);
      }
      n.f11.accept(this);
      n.f12.accept(this);
      opMethod = "}";
      finalOutput.add(opMethod);
     // Map<String,String> mapTop = stackOfMaps.peek();
      // for (Map.Entry<String, String> entry : mapTop.entrySet()) {
      //    System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
      // }
      mapOfVars.clear();
      stackOfMaps.pop();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      
      String firstParam = (String)n.f0.accept(this);
      
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String typeVar = (String)n.f0.accept(this);
      n.f1.accept(this);
      String formalVarName = n.f1.f0.toString();
      mapOfVars.put(formalVarName, "#BOT");
      String formalDecl ;
       formalDecl = finalOutput.getLast()+typeVar + " "+ n.f1.f0.toString();
       finalOutput.set(finalOutput.size()-1,formalDecl);
    //  _ret = (R)formalDecl;
      //formalDecl = typeVar +" "+n.f1.f0.toString();
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      String formalDecl;
      formalDecl = finalOutput.getLast() + ",";
      finalOutput.set(finalOutput.size()-1,formalDecl);
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
    boolean typeVar = false;
   public R visit(Type n) {
      typeVar = true;
      R _ret=null;
      _ret = n.f0.accept(this);
      typeVar = false;
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret = (R)"int []";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      String opBlock;
      opBlock = "{";
      finalOutput.add(opBlock);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      opBlock = "}";
      finalOutput.add(opBlock);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   boolean asgnStmt = false;
   public R visit(AssignmentStatement n) {
     
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      // if(arrallocexp == true){
      //    _ret =(R) "";
      //    return _ret;
      // }
      asgnStmt = true;
      String opString;
      // if(value  != "#BOT") {
      opString = (String)n.f0.f0.toString()+" = ";
         finalOutput.add(opString);
      
      
      _ret = (R)n.f2.accept(this);
      String value = (String)_ret;
      Map<String, String> mapAtTop = new HashMap<>();
     // if(!stackOfMaps.isEmpty()){
         mapAtTop = stackOfMaps.pop();
        
     //    }

      // }

      
      if(_ret != null && doNotUpdate == false){
         mapAtTop.put(n.f0.f0.toString(),value);
      }
      n.f3.accept(this);

      stackOfMaps.push(mapAtTop);
      asgnStmt = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      String arrAss;
      Map<String,String> mapTop = stackOfMaps.peek();
      arrAss = n.f0.f0.toString()+"[";
      String id1Val;
      id1Val = mapTop.get(n.f2.f0.toString());
      String id2Val = mapTop.get(n.f5.f0.toString());
      if(id1Val.equals("#BOT") || id1Val.equals("#TOP")){
         arrAss = arrAss +n.f2.f0.toString()+"] = ";
      }
      else {
         arrAss = arrAss + id1Val+"] = ";
      }
      if(id2Val.equals("#BOT") || id2Val.equals("#TOP")){
         arrAss = arrAss + n.f5.f0.toString()+";";
         finalOutput.add(arrAss);
      }
      else {
         arrAss = arrAss + id2Val+";";
         finalOutput.add(arrAss);
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      String opFieldAss;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String idVal ;
      Map<String,String> mapTop = stackOfMaps.peek();
      idVal = mapTop.get(n.f4.f0.toString());
      if(idVal.equals("#BOT") || idVal.equals("#TOP")){
         opFieldAss = n.f0.f0.toString()+"."+n.f2.f0.toString()+" = "+n.f4.f0.toString()+";";
         finalOutput.add(opFieldAss);
      }
      else {
         opFieldAss = n.f0.f0.toString()+"."+n.f2.f0.toString()+" = "+idVal+";";
         finalOutput.add(opFieldAss);
      }
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    Stack<Map<String, String>> stackOfMaps = new Stack<>();
    
   public R visit(IfStatement n) {
      R _ret=null;
      String opIf;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String ifCondition = "false";
      boolean ifConditionValue = false;
      String varName = n.f2.f0.toString();
      Map<String,String> mapTop = stackOfMaps.peek();
      String expValue = mapTop.get(varName);
      ifCondition = expValue;

      if(expValue.equals("#BOT") || expValue.equals("#TOP")){
         opIf = "if( "+n.f2.f0.toString()+")";
         finalOutput.add(opIf);
      }
      else {
         opIf = "if( "+expValue+")";
         finalOutput.add(opIf);
      }
      if(ifCondition.equals("true") || ifCondition.equals("#BOT")){
         Map<String, String> mapOfIf = new HashMap<>();

         mapOfIf.putAll(mapTop);
         stackOfMaps.push(mapOfIf);
         ifConditionValue = true;
         n.f4.accept(this);
         if(!expValue.equals("#BOT"))
            printElseStatements(n);
      }
      if(ifCondition.equals("false") || ifCondition.equals("#BOT")){
        //n.f4.accept(this);
        if(!ifCondition.equals("#BOT")) {
            printIfStatements(n);
        }
         ifConditionValue = false;
         Map<String, String> mapOfElse = new HashMap<>();
         mapOfElse.putAll(mapTop);

         stackOfMaps.push(mapOfElse);


         n.f5.accept(this);
         opIf = "else ";
         finalOutput.add(opIf);
         n.f6.accept(this);
      }

      
      if(ifCondition.equals("#BOT")){
         Map<String, String> meetMap = new HashMap<>();         
         Map<String, String> mapOfElseMeet = new HashMap<>();    
         Map<String, String> mapOfIfMeet = new HashMap<>(); 
         mapOfElseMeet = stackOfMaps.pop();
         mapOfIfMeet = stackOfMaps.pop();        
   
         for (Map.Entry<String, String> entry : mapOfElseMeet.entrySet()) {
            //System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
            String variableName = entry.getKey();
            String val1 = entry.getValue();
            String val2 = mapOfIfMeet.get(variableName);
            String meetValue = meet(val1, val2);
            meetMap.put(variableName,meetValue);
           // System.out.println("Meet of values: "+val1+" " + val2+" is :"+meetValue);
         }
         stackOfMaps.pop();
         stackOfMaps.push(meetMap);
      }
      else if(ifConditionValue == false){
         // mapOfVars.clear();
         // mapOfVars.putAll(mapOfElse);
         Map<String, String> mapOfElse = new HashMap<>();
         mapOfElse = stackOfMaps.pop();
         stackOfMaps.pop();


         stackOfMaps.push(mapOfElse);
      }
      else if(ifConditionValue == true){
         // mapOfVars.clear();
         // mapOfVars.putAll(mapOfIf);
         Map<String, String> mapOfIf = new HashMap<>();
         mapOfIf = stackOfMaps.pop();
         stackOfMaps.pop();
        // System.out.println(mapOfIf);
         
         stackOfMaps.push(mapOfIf);

      }

      // System.out.println("-----------------MAP AT TOP IN IF-STATEMENT--------");
      // Map<String,String> mapTop1 = stackOfMaps.peek();
      //    for (Map.Entry<String, String> entry : mapTop1.entrySet()) {
      //       System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
      //    }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
    int whlPointer;
    int whlCounter = 0;
   // Stack<int> whlPts;
   public R visit(WhileStatement n) {
      R _ret=null;
      
      whlCounter++;
      Map<String,String> mapTop = new HashMap<>();
      mapTop = stackOfMaps.peek();
      boolean change = true;
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String conditionVar = n.f2.f0.toString();
      String conditionValue = mapTop.get(conditionVar);



      if(conditionValue.equals("false")){
         return _ret;
      }

      String opWhile = "while("+n.f2.f0.toString()+"){";
      finalOutput.add(opWhile);
      whlPointer = finalOutput.size();


      while(change == true && (conditionValue.equals("true") || conditionValue.equals("#BOT"))){
         
         Map<String,String> mapInsideWhile = new HashMap<>();
         mapInsideWhile.putAll(stackOfMaps.peek());
         stackOfMaps.push(mapInsideWhile);
         n.f4.accept(this);
         
         Map<String,String> mapUpdated = stackOfMaps.pop();

         Map<String,String> mapAtTopOfWhile = stackOfMaps.pop();


         Map<String,String> meetMap = new HashMap<>();
            for (Map.Entry<String, String> entry : mapUpdated.entrySet()) {
               
               
      
               String variableName = entry.getKey();
               String val1 = entry.getValue();
               String val2 = mapAtTopOfWhile.get(variableName);
               //System.out.println("Map: "+stackOfMaps.size());
              // System.out.println("Var name & Meet of val1 and val2"+variableName+" "+val1+"and "+val2);
               String meetValue = meet(val1, val2);
               meetMap.put(variableName,meetValue);
            }
         change = checkForFixPoint(meetMap, mapAtTopOfWhile);
        // if(change == true){
            
               
               //stackOfMaps.pop();
            stackOfMaps.push(meetMap);
      
            //}
            
      }

      
      if(whlCounter == 1)
         finalOutput.subList(whlPointer, finalOutput.size()).clear();
       n.f4.accept(this);

      if(conditionValue.equals("true")){
         Map<String,String> mapFromWhile = new HashMap<>();
         mapFromWhile = stackOfMaps.pop();
        // System.out.println("Mapfrom popped at 587");

       //  stackOfMaps.pop();
        // System.out.println("Map top popped at 591");

         stackOfMaps.push(mapFromWhile);
      }

      if(conditionValue.equals("#BOT")){
         Map<String,String> mapFromWhile = new HashMap<>();
         mapFromWhile = stackOfMaps.pop();
        // System.out.println("Map top popped at 598");

         Map<String,String> meetMap = new HashMap<>();
         for (Map.Entry<String, String> entry : mapFromWhile.entrySet()) {
            String varName = entry.getKey();
            String topMapValue = mapTop.get(varName);
            String valFromWhileMap = entry.getValue();
            
            String meetValue = meet(topMapValue,valFromWhileMap);
            meetMap.put(varName,meetValue);
            //stackOfMaps.pop();
            

         }
         stackOfMaps.push(meetMap);
      }
      //System.out.println("TAG1: " + finalOutput);
      // for(int i=whlPointer;i<finalOutput.size();i++){
      //    finalOutput.remove(i);
      // }
  

         opWhile =  "}";
        finalOutput.add(opWhile);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
    boolean forStmt = false;
    boolean condCheck = false;
    boolean forConditionalPrint = false;
    boolean forStmtMsgSend = false;
    int forPtr;
    int forCounter = 0;
    boolean doNotPrintFromFor = false;
    public R visit(ForStatement n) {
      R _ret=null;
      forStmt = true;
      forCounter++;
      String opFor;
      condCheck = true;
      String conditionValue = (String)n.f6.accept(this);
     // System.out.println(conditionValue);
      condCheck = false;
      doNotPrintFromFor = true;
      if(conditionValue.equals("false")){
         String expVal;
         asgnStmt = true;
         expVal = n.f2.f0.toString()+" = ";
         finalOutput.add(expVal);
         Map<String,String> mapAtTop = new HashMap<>();
         mapAtTop.putAll(stackOfMaps.pop());
         String initialVal = (String)n.f4.accept(this);
         mapAtTop.put(n.f2.f0.toString(),initialVal);
         //System.out.println(mapAtTop);
         stackOfMaps.push(mapAtTop);
         asgnStmt = false;
         forStmt = false;
         return _ret;
      }
      opFor = "for("+n.f2.f0.toString()+" = ";
      finalOutput.add(opFor);
      n.f0.accept(this);
      n.f1.accept(this);
      asgnStmt = true;
      n.f2.accept(this);
      n.f3.accept(this);

      String initialVal = (String)n.f4.accept(this);
      asgnStmt = false;
      Map<String,String> mapAtTop = new HashMap<>();
      mapAtTop.putAll(stackOfMaps.pop());
      mapAtTop.put(n.f2.f0.toString(),initialVal);
      //System.out.println(mapAtTop);
      stackOfMaps.push(mapAtTop);
      
      
      n.f5.accept(this);
      String exp;
    //  String exp = (String)n.f6.accept(this);


      //System.out.println("Condition val: "+conditionValue);
     
      boolean change = true;
   
      n.f7.accept(this);
      n.f8.accept(this);
     // opFor = finalOutput.getLast()+n.f8.f0.toString()+" = ";
    //  finalOutput.set(finalOutput.size()-1, opFor);
      n.f9.accept(this);
     // exp = (String)n.f10.accept(this);

     // opFor = finalOutput.getLast()+exp+"){";
    //  finalOutput.set(finalOutput.size()-1, opFor);
      n.f11.accept(this);
      forStmt = false;
      forPtr = finalOutput.size();
      while(change == true && (conditionValue.equals("true") || conditionValue.equals("#BOT"))){
         Map<String,String> mapInsideFor = new HashMap<>();
         mapInsideFor.putAll(stackOfMaps.peek());
         stackOfMaps.push(mapInsideFor);   
        
         
         n.f12.accept(this);
         String varName = n.f8.f0.toString();
         String expValue1 = (String)n.f10.toString();
         mapInsideFor.put(varName, expValue1);

         Map<String,String> mapUpdated = stackOfMaps.pop();
         String updatedVar = (String)n.f8.f0.toString();
         String expValue = (String)n.f10.accept(this);
         //System.out.println("Updated var and updated value: "+updatedVar+" "+expValue);
         String meetOfVar  = meet(mapUpdated.get(updatedVar),expValue);
         mapUpdated.put(updatedVar,meetOfVar);

         Map<String,String> mapAtTopOfFor = stackOfMaps.pop();


         Map<String,String> meetMap = new HashMap<>();
            for (Map.Entry<String, String> entry : mapUpdated.entrySet()) {
               
               
      
               String variableName = entry.getKey();
               String val1 = entry.getValue();
               String val2 = mapAtTopOfFor.get(variableName);
               
               String meetValue = meet(val1, val2);
               meetMap.put(variableName,meetValue);
            }
         change = checkForFixPoint(meetMap, mapAtTopOfFor);
        // if(change == true){
            
               
               //stackOfMaps.pop();
               stackOfMaps.push(meetMap);
             //  System.out.println(finalOutput.getLast());

      }
      if(forCounter == 1){
         finalOutput.subList(forPtr, finalOutput.size()).clear();
      }
      doNotPrintFromFor = false;
     forConditionalPrint = true;
      Map<String,String> mapToCheck = stackOfMaps.peek();
      opFor = finalOutput.getLast();
      exp = (String)n.f6.accept(this);
      opFor = opFor + exp+";";
      exp = (String)n.f10.accept(this);
      opFor = opFor + n.f8.f0.toString()+" = "+exp+") {";
      finalOutput.set(finalOutput.size()-1, opFor);
      forConditionalPrint = false;
      if(conditionValue.equals("true")){
         Map<String,String> mapFromWhile = new HashMap<>();
         mapFromWhile = stackOfMaps.pop();
         // System.out.println("Mapfrom popped at 587");
         
         // stackOfMaps.pop();
         // System.out.println("Map top popped at 591");
         
         stackOfMaps.push(mapFromWhile);
      }
      
      if(conditionValue.equals("#BOT")){
         Map<String,String> mapFromFor = new HashMap<>();
         mapFromFor = stackOfMaps.pop();
         // System.out.println("Map top popped at 598");
         
         Map<String,String> meetMap = new HashMap<>();
         for (Map.Entry<String, String> entry : mapFromFor.entrySet()) {
            String varName = entry.getKey();
            String topMapValue = mapAtTop.get(varName);
            String valFromWhileMap = entry.getValue();
            
            String meetValue = meet(topMapValue,valFromWhileMap);
            meetMap.put(varName,meetValue);
            //stackOfMaps.pop();
            
            
         }
         stackOfMaps.push(meetMap);
      }
      doNotUpdate = true;
      n.f12.accept(this);
      doNotUpdate = false;
      
      opFor = "}";
      finalOutput.add(opFor);

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      String opPrint;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      opPrint = "System.out.println(";
      String idVal;
      Map<String,String> mapTop = stackOfMaps.peek();
      idVal = mapTop.get(n.f2.f0.toString());
      if(idVal.equals("#BOT") || idVal.equals("#TOP")){
         opPrint = opPrint + n.f2.f0.toString()+");";
         finalOutput.add(opPrint);
      }
      else {
         opPrint = opPrint + idVal+");";
         finalOutput.add(opPrint);
      }
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      _ret = (R)n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expVal1;
      if(forStmt == true && condCheck == false){
         expVal1 = finalOutput.getLast()+n.f0.f0.toString()+"&"+n.f2.f0.toString()+";";
         finalOutput.set(finalOutput.size()-1, expVal1);
         return _ret;
      }
      
      Map<String,String> mapTop = stackOfMaps.peek();
      String firstVar = n.f0.f0.toString();
      String secondVar = n.f2.f0.toString();
      String val1 = mapTop.get(firstVar);
      String val2 = mapTop.get(secondVar);
      
      String expVal;
      if(val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" & " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
     else if(val1.equals("#BOT") && !val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" & " + val2+";";

         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(!val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+val1+" & " + val2+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(val1.equals("true") || val1.equals("false")){
         boolean value1 = Boolean.parseBoolean(val1);
         boolean value2 = Boolean.parseBoolean(val2);
         _ret = (R)String.valueOf(value1 & value2);
         if(condCheck != true){
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         }
      }
      else{
         int value1 = Integer.parseInt(val1);
         int value2 = Integer.parseInt(val2);
         _ret = (R)String.valueOf(value1 & value2);
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         // if(){
         //    _ret = (R)"true";
         // }
         // else{
         //    _ret = (R)"false";
         // }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
    boolean comp = false;
   public R visit(CompareExpression n) {
      comp = true;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String firstVar = n.f0.f0.toString();
      String secondVar = n.f2.f0.toString();
      String val1 = mapTop.get(firstVar);
      String val2 = mapTop.get(secondVar);
      String expVal;
      if(forStmt == true && condCheck == true){
         
            int value1 = Integer.parseInt(val1);
            int value2 = Integer.parseInt(val2);
          //  System.out.println("val1 nad val2: "+value1+" "+value2);
            if(value1 < value2){
               _ret = (R)"true";
            }
            else{
               _ret = (R)"false";
            }
            return _ret;
         
      }
      if(forStmt == true && condCheck == false){
         expVal = finalOutput.getLast()+n.f0.f0.toString()+"<"+n.f2.f0.toString()+";";
         finalOutput.set(finalOutput.size()-1, expVal);
         return _ret;
      }
     // System.out.println(finalOutput);
      if(val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" < " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
     else if(val1.equals("#BOT") && !val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" < " + val2+";";

         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(!val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+val1+" < " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      // else if(val1.equals("true") || val1.equals("false")){
      //    boolean value1 = Boolean.parseBoolean(val1);
      //    boolean value2 = Boolean.parseBoolean(val2);
      //    _ret = (R)String.valueOf(value1 & value2);
      //    expVal = finalOutput.getLast() + (String)_ret+";";
      //    finalOutput.set(finalOutput.size()-1,expVal);
      // }
      else{
         int value1 = Integer.parseInt(val1);
         int value2 = Integer.parseInt(val2);
       //  System.out.println("val1 nad val2: "+value1+" "+value2);
         if(value1 < value2){
            _ret = (R)"true";
         }
         else{
            _ret = (R)"false";
         }
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      comp = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
    boolean plus = false;
   public R visit(PlusExpression n) {
      plus = true;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String firstVar = n.f0.f0.toString();
      String secondVar = n.f2.f0.toString();
      String val1 = mapTop.get(firstVar);
      String val2 = mapTop.get(secondVar);
      String expVal;
      if(forConditionalPrint == true){
         String exp;
         if(val1.equals("#BOT") && val2.equals("#BOT")){
            exp = firstVar + " + " + secondVar;
            _ret = (R)exp;
            return _ret;
         }
         else if(!val1.equals("#BOT") && !val2.equals("#BOT")){
            int v1 = Integer.parseInt(val1);
            int v2 = Integer.parseInt(val2);
            v1 = v1 + v2;
            exp = String.valueOf(v1);
            _ret = (R)exp;
            return _ret;
         }
         else if(val1.equals("#BOT") && !val2.equals("#BOT")){
            int v2 = Integer.parseInt(val2);
            exp = firstVar + " + " + String.valueOf(v2);
            _ret = (R)exp;
            return _ret;
         }
         else if(!val1.equals("#BOT") && val2.equals("#BOT")){
            int v2 = Integer.parseInt(val1);
            exp =String.valueOf(v2)+ " + " + secondVar;
            _ret = (R)exp;
            return _ret;
         }
      }
      // if(forStmt == true){
      //    expVal = finalOutput.getLast()+n.f0.f0.toString()+"+"+n.f2.f0.toString();
      //    finalOutput.set(finalOutput.size()-1,expVal);
      //    return _ret;
      // }
      //System.out.println("TAG1 "+firstVal+secondVar);
      if(val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" + " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
     else if(val1.equals("#BOT") && !val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" + " + val2+";";

         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(!val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+val1+" + " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else{
         int value1 = Integer.parseInt(val1);
         int value2 = Integer.parseInt(val2);
         _ret = (R)String.valueOf(value1 + value2);
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         // if(){
         //    _ret = (R)"true";
         // }
         // else{
         //    _ret = (R)"false";
         // }
      }
      plus = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
    boolean minus = false;
   public R visit(MinusExpression n) {
      minus = true;
      R _ret=null;
      
      if(forStmt == true){
         String expVal;
         expVal = finalOutput.getLast()+n.f0.f0.toString()+"-"+n.f2.f0.toString();
         finalOutput.set(finalOutput.size()-1,expVal);
         return _ret;
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String firstVar = n.f0.f0.toString();
      String secondVar = n.f2.f0.toString();
      String val1 = mapTop.get(firstVar);
      String val2 = mapTop.get(secondVar);
      String expVal;
      //System.out.println("TAG1 "+firstVal+secondVar);
      if(val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" - " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
     else if(val1.equals("#BOT") && !val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" - " + val2+";";

         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(!val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+val1+" - " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else{
         int value1 = Integer.parseInt(val1);
         int value2 = Integer.parseInt(val2);
         _ret = (R)String.valueOf(value1 - value2);
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         // if(){
         //    _ret = (R)"true";
         // }
         // else{
         //    _ret = (R)"false";
         // }
      }
      minus = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */ boolean timeexp = false;
   public R visit(TimesExpression n) {
      timeexp = true;
      R _ret=null;
      if(forStmt == true){
         String expVal;
         expVal = finalOutput.getLast()+n.f0.f0.toString()+"+"+n.f2.f0.toString();
         finalOutput.set(finalOutput.size()-1,expVal);
         return _ret;
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String firstVar = n.f0.f0.toString();
      String secondVar = n.f2.f0.toString();
      String val1 = mapTop.get(firstVar);
      String val2 = mapTop.get(secondVar);
      String expVal;
      //System.out.println("TAG1 "+firstVal+secondVar);
      if(val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" * " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
     else if(val1.equals("#BOT") && !val2.equals("#BOT")){
         expVal = finalOutput.getLast()+firstVar+" * " + val2+";";

         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else if(!val1.equals("#BOT") && val2.equals("#BOT")){
         expVal = finalOutput.getLast()+val1+" * " + secondVar+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         _ret = (R)"#BOT";
      }
      else{
         int value1 = Integer.parseInt(val1);
         int value2 = Integer.parseInt(val2);
         _ret = (R)String.valueOf(value1 * value2);
         expVal = finalOutput.getLast() + (String)_ret+";";
         finalOutput.set(finalOutput.size()-1,expVal);
         // if(){
         //    _ret = (R)"true";
         // }
         // else{
         //    _ret = (R)"false";
         // }
      }
      timeexp = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
    boolean arrLookup = false;
   public R visit(ArrayLookup n) {
      arrLookup = true;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String expVal;
      Map<String,String> mapTop = stackOfMaps.peek();
      String val = mapTop.get(n.f2.f0.toString());
      if(val.equals("#BOT")){
         expVal = finalOutput.getLast() + n.f0.f0.toString()+"["+n.f2.f0.toString()+"];";
         finalOutput.set(finalOutput.size()-1, expVal);
      }
      else{
         expVal = finalOutput.getLast()+n.f0.f0.toString()+"["+val+"];";
         finalOutput.set(finalOutput.size()-1, expVal);

      }
      _ret = (R)"#BOT";
      arrLookup = false;

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
    boolean arrLen = false;
   public R visit(ArrayLength n) {
      arrLen = true;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expVal;
      expVal = finalOutput.getLast()+n.f0.f0.toString()+".length;";
      finalOutput.set(finalOutput.size()-1, expVal);
      _ret = (R)"#BOT";
      arrLen = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
    boolean msgSend = false;
    boolean calledthis = false;
   public R visit(MessageSend n) {
      msgSend = true;
      R _ret=null;
      String op;
      String expVal = "";
      String pExp = (String)n.f0.accept(this);
      if(pExp.equals("this")&& condCheck == false){
        op =  finalOutput.getLast() + "this.";
        finalOutput.set(finalOutput.size()-1, op);
      }
      n.f1.accept(this);
      n.f2.accept(this);
      calledthis = false;
      msgSend = false;
      // System.out.println(finalOutput.getLast());
      if(condCheck == false){
         expVal = finalOutput.getLast()+n.f2.f0.toString()+"(";
         // System.out.println("1123:"+finalOutput.getLast());
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      if(pExp.equals("this")&& forConditionalPrint == true){
         expVal = "this.";
      }
     if(forConditionalPrint == true){
      expVal = expVal+n.f2.f0.toString()+"()";
      _ret = (R)expVal;
      return _ret;
     }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      if(condCheck == false){
      expVal = finalOutput.getLast()+");";
      finalOutput.set(finalOutput.size()-1,expVal);
      }
      
      _ret = (R)expVal;
     // System.out.println(expVal);
      msgSend = false;
      _ret = (R)"#BOT";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n) {
      R _ret=null;
      n.f0.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String val = mapTop.get(n.f0.f0.toString());
      if(val.equals("#BOT")){
         String expVal = finalOutput.getLast()+n.f0.f0.toString();
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      else{
         String expVal = finalOutput.getLast()+val;
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      Map<String,String> mapTop = stackOfMaps.peek();
      String val = mapTop.get(n.f1.f0.toString());
      if(val.equals("#BOT")){
         String expVal = finalOutput.getLast()+","+n.f1.f0.toString();
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      else{
         String expVal = finalOutput.getLast()+","+val;
         finalOutput.set(finalOutput.size()-1,expVal);
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
    boolean primeExp = false;
   public R visit(PrimaryExpression n) {
      R _ret=null;
      primeExp = true;
      
      _ret = (R)n.f0.accept(this);
      // if(comingFromMsgSend == true){
      //    String expVal = finalOutput.getLast()+(String)_ret+";";
      //    System.out.println("Here:"+expVal);
      //    msgSend = false;
      //    return _ret;
      // }
      if(asgnStmt == true && msgSend == false){
         //System.out.println("Setting here: "+finalOutput.getLast());
       //  System.out.println("_ret hre is: "+_ret);
      //   System.out.println("Come :"+comingFromMsgSend);
         if(comingFromMsgSend == false){
         
             String expVal = finalOutput.getLast()+(String)_ret+";";
            finalOutput.set(finalOutput.size()-1,expVal);
         }
         if(comingFromMsgSend == true){
            comingFromMsgSend = false;
         }
      }
      primeExp = false;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
    boolean intLit = false;
   public R visit(IntegerLiteral n) {

      R _ret=null;
      n.f0.accept(this);
      String val = n.f0.toString();
      _ret = (R)val;
      // if(asgnStmt = true){
      // String expVal = finalOutput.getLast()+n.f0.toString()+";";
      // finalOutput.set(finalOutput.size()-1, expVal);
      // }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
       n.f0.accept(this);
       String val = "true";
       _ret = (R)val;
      //  if(asgnStmt = true){
      //    String expVal = finalOutput.getLast()+n.f0.toString()+";";
      //    finalOutput.set(finalOutput.size()-1, expVal);
      //    }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String val = "false";
      _ret = (R)val;
      // if(asgnStmt = true){
      //    String expVal = finalOutput.getLast()+n.f0.toString()+";";
      //    finalOutput.set(finalOutput.size()-1, expVal);
      //    }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
    boolean comingFromMsgSend = false;
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      if(typeVar == true){
         _ret = (R)n.f0.toString();
         return _ret;
      }
      
      if((asgnStmt == true && primeExp == true && allocexp == false && arrallocexp == false && arrLookup == false && arrLen ==false && msgSend == false && comp == false && condCheck == false) || forConditionalPrint == true){
         Map<String,String> mapTop = stackOfMaps.peek();
         String value = mapTop.get(n.f0.toString());
         if(value == null){
            return _ret;
         }
         if( value.equals("#BOT") || value.equals("#TOP")){
            _ret = (R)n.f0.toString();
         }
         else{
            _ret = (R)value;
         }
         return _ret;
      }
      Map<String,String> mapTop = stackOfMaps.peek();
      String value = mapTop.get(n.f0.toString());
      _ret = (R) value;
      String expVal;
      if(msgSend == true && calledthis == false){
        // System.out.println("H: "+finalOutput.getLast());
         expVal = finalOutput.getLast()+n.f0.toString()+".";
        // System.out.println("Set val: "+expVal);
         finalOutput.set(finalOutput.size()-1,expVal);
         comingFromMsgSend = true;
         msgSend = false;
      }
      // if(asgnStmt == true && comp == false && arrallocexp == false && plus == false && minus == false && timeexp == false && arrLen == false && allocexp == false && arrLookup == false && msgSend == false)
      // {
      //    String val = mapTop.get(n.f0.toString());
      //    System.out.println("var name:"+ n.f0.toString());
      //    if(val.equals("#BOT")){
      //       expVal = finalOutput.getLast()+n.f0.toString()+";";
      //    }
      //    else {
      //       expVal = finalOutput.getLast()+val+";";

      //    }
      //    finalOutput.set(finalOutput.size()-1,expVal);
      // }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      calledthis = true;
      n.f0.accept(this);
      String expval;
      if(asgnStmt == true && primeExp == true){
         expval = finalOutput.getLast()+"this";
         _ret = (R)"this";
         return _ret;
      }
      expval = finalOutput.getLast()+"this.";
      finalOutput.set(finalOutput.size()-1,expval);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
    boolean arrallocexp = false;
   public R visit(ArrayAllocationExpression n) {
   arrallocexp = true;
   R _ret=null;
      String expVal;
      expVal = " new int [";
      Map<String,String> mapTop = stackOfMaps.peek();
      String val = mapTop.get(n.f3.f0.toString());
      if(val.equals("#BOT")){
         expVal = expVal + n.f3.f0.toString()+"];";
        // finalOutput.set(finalOutput.size()-1, expVal);
      }
      else {
         expVal = expVal + val+"]";
       //  finalOutput.set(finalOutput.size()-1, expVal);

      }
      _ret = (R)expVal;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      arrallocexp = false;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    boolean allocexp = false;
   public R visit(AllocationExpression n) {
      allocexp = true;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String expVal;
      expVal = "new "+n.f1.f0.toString()+"()";
      //finalOutput.set(finalOutput.size()-1, expVal);
      _ret = (R) expVal;
      allocexp = false;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String expVal;
     // expVal = finalOutput.getLast() + "!";
      Map<String,String> mapTop = stackOfMaps.peek();
      String val = mapTop.get(n.f1.f0.toString());
      if(val.equals("#BOT")){
         expVal = "!" + n.f1.f0.toString()+"";
        // finalOutput.set(finalOutput.size()-1, expVal);
         _ret = (R)"#BOT";
      }
      else {
         boolean eval = !Boolean.parseBoolean(val);
         expVal = finalOutput.getLast() + eval+";";
        // finalOutput.set(finalOutput.size()-1, expVal);
         if(eval == true){
            _ret = (R)"true";
         }
         else{
            _ret = (R)"false";
         }
      }
      
      return _ret;
   }

   

   public String meet(String s1,String s2){
      if(s1.equals(s2)) {
         return s1;
      }
      if(s1.equals("#TOP") && (!s2.equals("#BOT"))) {
         return s2;
      }
      if(s2.equals("#TOP") && (!s1.equals("#BOT"))) {
         return s1;
      }
      if(s1.equals("#BOT") || s2.equals(("#BOT"))){
         return "#BOT";
      }
      return "#BOT";
   }
   public void printElseStatements(IfStatement n){
      doNotUpdate = true;
      String expVal;
      expVal = "else";
      finalOutput.add(expVal);
      n.f6.accept(this);
      doNotUpdate = false;
   }
   boolean doNotUpdate = false;
   public void printIfStatements(IfStatement n){
      doNotUpdate = true;
      String expVal;
      n.f4.accept(this);
    //  System.out.println("Not updating:"+n);
      doNotUpdate = false;

   }

   public boolean checkForFixPoint(Map<String,String> m1,Map<String,String> m2){
      // Map<String,String> meetMap = new HashMap<>();
      // for (Map.Entry<String, String> entry : m1.entrySet()) {
         
      //    // System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
         

      //    String variableName = entry.getKey();
      //    String val1 = entry.getValue();
      //    String val2 = m2.get(variableName);
      //    String meetValue = meet(val1, val2);
      //    meetMap.put(variableName,meetValue);
         
      //    stackOfMaps.pop();
      //    stackOfMaps.push(meetMap);

         
      // }
      for (Map.Entry<String, String> entry : m1.entrySet()) {
         String variableName = entry.getKey();
         String map2Value = m2.get(variableName);
       //  System.out.println("Comparing values for "+variableName+" : "+map2Value + " & "+ entry.getValue());
         if(map2Value != entry.getValue()){
            return true;
         }
      }
      //System.out.println("Loop over");
      return false;
   }
   public void writeToFile(){
      //  String fileName = "output.java";
        for(int i=0;i<finalOutput.size();i++){
          System.out.println(finalOutput.get(i));
           
        }
  }

}
