//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

import javax.swing.plaf.synth.SynthEditorPaneUI;

import visitor.Pair;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondPassForTemporaries<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   Map<String,Pair> mapForTemp = new HashMap<>();

   public void writeToFile(){
       //  String fileName = "output.java";
         for(int i=0;i<finalOutput.size();i++){
           System.out.println(finalOutput.get(i));
            
         }
   }

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    ArrayList<String> finalOutput = new ArrayList<>();
    int ptr_declaration = 0;
    public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
    public void setAtIndex(int i,String type,String var_name) {
      String initString = type + " " + var_name +";";
      finalOutput.add(i,initString);
      ptr_declaration++;
    }
    public Map<String,String> mapForMethods;


    public  Map<String,String> mapForContext = new HashMap<>();
   
    int thisCounter=0;
   public R visit(MainClass n) {
      R _ret=null;
      String opClass;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      opClass = "class " + n.f1.f0.toString() + " {";
      // System.out.println("class " + n.f1.f0.toString() + " {");
      finalOutput.add(opClass);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      //System.out.println("public static void main(String[] " + n.f11.f0.toString() + ") {");
      opClass = "public static void main(String[] " + n.f11.f0.toString() + ") {";
      finalOutput.add(opClass);
      ptr_declaration = finalOutput.size(); 
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      finalOutput.add("}");
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String opClass;
      opClass = "class " + n.f1.f0.toString() + " {";
      finalOutput.add(opClass);
      ptr_declaration = finalOutput.size();
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      String str;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      str = "class "+n.f1.f0.toString()+" extends "+n.f3.f0.toString()+" {";
      finalOutput.add(str);
      ptr_declaration = finalOutput.size();
      n.f5.accept(this);
      n.f6.accept(this);

      n.f7.accept(this);
      finalOutput.add("}");

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      String type,var_name,str;

      type = (String)n.f0.accept(this);
      n.f1.f0.accept(this);
      var_name = n.f1.f0.toString();
      n.f2.accept(this);
      str = type + " " + var_name + ";";
      finalOutput.add(str);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      String str;
      
      n.f0.accept(this);
      String type = (String)n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      //System.out.println("public " + type +" " n.f2.f0.toString() + " (" );
      str = "public " + type +" "+ n.f2.f0.toString() + " (" ;
      finalOutput.add(str);
      n.f4.accept(this);
      n.f5.accept(this);
      
      n.f6.accept(this);
      //System.out.println(") {");
      // finalOutput.set(") {");
      str = finalOutput.getLast() + " ) {" ;
      finalOutput.set(finalOutput.size()-1, str);

      ptr_declaration = finalOutput.size();
      n.f7.accept(this);
      n.f8.accept(this);
      int_literal_conv = true;
      bool_literal_conv=true;
      n.f9.accept(this);
      _ret = (R)n.f10.accept(this);
      str = "return "+_ret.toString()+";";
      finalOutput.add(str);
      finalOutput.add("}");
      bool_literal_conv=false;
      int_literal_conv = false;
      n.f11.accept(this);
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String type;
      type = (String)n.f0.accept(this);
      n.f1.accept(this);
      String str;
      //System.out.println("FORMAL: " +type + " " + n.f1.f0.toString());
      str = finalOutput.getLast() + type + " " + n.f1.f0.toString();
      finalOutput.set(finalOutput.size()-1, str);


      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      String str;
      str = finalOutput.getLast() + ",";
      finalOutput.set(finalOutput.size()-1, str);

      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      _ret = (R)n.f0.accept(this);
      //System.out.println("Type : "+_ret);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | ForStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
   
      n.f0.accept(this);
      finalOutput.add("{");
      n.f1.accept(this);
      n.f2.accept(this);
      
      finalOutput.add("}");

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   // boolean assign = false;
   public R visit(AssignmentStatement n) {
     // assign = true;
     
      R _ret=null;
      String str;
      n.f0.accept(this);
      n.f1.accept(this);

      
      _ret = (R)n.f2.accept(this);
      //System.out.println("ASS: " + n.f0.f0.toString()+" = " + _ret + ";");
      str = n.f0.f0.toString()+" = " + _ret.toString() + ";";
      //System.out.println("TAG7: "+str);
      finalOutput.add(str);
      n.f3.accept(this);
    // assign = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R exp1,exp2;
      n.f0.accept(this);
      n.f1.accept(this);
      exp1 = (R)n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      exp2= (R)n.f5.accept(this);
      n.f6.accept(this);
      str = n.f0.f0.toString()+"["+exp1.toString()+"]"+" = " +exp2.toString()+";";
      finalOutput.add(str);
      //System.out.println("Tag4: " +str);
      bool_literal_conv=false;
      int_literal_conv = false;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      String str;
     R exp1 = (R) n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      R exp2 = (R)n.f4.accept(this);
      n.f5.accept(this);
      str = exp1.toString() + "." + n.f2.f0.toString() +" = "+exp2.toString() +";";
      finalOutput.add(str);
     // System.out.println("TAG: "+str);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {

      R _ret=null;
      String str;
      n.f0.accept(this);
      n.f1.accept(this);
      R exp1 = (R)n.f2.accept(this);
      n.f3.accept(this);
      str = "if(" + exp1.toString()+"){";
      finalOutput.add(str);
     // System.out.println("TAG1: "+str);
      n.f4.accept(this);
      finalOutput.add("}");
      n.f5.accept(this);
      finalOutput.add("else {");
      n.f6.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      R exp;
      n.f0.accept(this);
      n.f1.accept(this);
      exp = (R)n.f2.accept(this);
      n.f3.accept(this);
      String str;
      str = "while(" + exp.toString()+")";
      finalOutput.add(str);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n) {
      R _ret=null;
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R exp1,exp2,exp3;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      exp1 = (R)n.f4.accept(this);
      n.f5.accept(this);
      exp2 = (R)n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      exp3 = (R)n.f10.accept(this);
      n.f11.accept(this);
      str = "for("+n.f2.f0.toString()+"="+exp1.toString()+";"+exp2.toString()+";"+n.f8.f0.toString()+"="+exp3.toString()+")";
     // System.out.println("Tag5: "+str);
     finalOutput.add(str);
      n.f12.accept(this);
      bool_literal_conv=false;
      int_literal_conv = false;
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      int_literal_conv = true;
      bool_literal_conv=true;
      n.f0.accept(this);
      n.f1.accept(this);
      _ret = (R)n.f2.accept(this);
    //  System.out.println("PRINT: "+_ret);
      //setAtIndex(ptr_declaration, type, var_name);
   //   String declarationString = var_name + " = " + value+";";
      String str = "System.out.println(" + _ret + ");";
     finalOutput.add(str);
      n.f3.accept(this);
      n.f4.accept(this);
      bool_literal_conv=false;
      int_literal_conv = false;
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      _ret = (R)n.f0.accept(this);

     // System.out.println("TAG 6: " + _ret.toString());
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R _ret=null;
      R x,y;
      x = (R)n.f0.accept(this);
      n.f1.accept(this);
      y = (R)n.f2.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String type ="boolean";
      String value = x.toString() + "&" + y.toString();
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      //  System.out.println(mapForTemp.get(var_name).type + " " + mapForTemp.get(var_name).value );

      
      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      _ret = (R)(var_name);
      bool_literal_conv=false;
      int_literal_conv = false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R _ret=null;
      R x,y;
      x = (R)n.f0.accept(this);
      n.f1.accept(this);
      y = (R)n.f2.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String type ="boolean";
      String value = x.toString() + "<" + y.toString();
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      //  System.out.println(mapForTemp.get(var_name).type + " " + mapForTemp.get(var_name).value );

      
      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      _ret = (R)(var_name);
      bool_literal_conv=false;
      int_literal_conv = false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   int t_count = 0;
   boolean int_literal_conv = false;
   boolean bool_literal_conv =false;
   public R visit(PlusExpression n) {
      int_literal_conv = true;
      bool_literal_conv =true;
      String str;
      R _ret=null;
      R x,y;
      x = (R)n.f0.accept(this);
      n.f1.accept(this);
      y = (R)n.f2.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String type ="int";
      String value = x.toString() + "+" + y.toString();
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      //  System.out.println(mapForTemp.get(var_name).type + " " + mapForTemp.get(var_name).value );

      
      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      _ret = (R)(var_name);
      int_literal_conv = false;
      bool_literal_conv=false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R _ret=null;
      R x,y;
      x = (R)n.f0.accept(this);
      n.f1.accept(this);
      y = (R)n.f2.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String type ="int";
      String value = x.toString() + "-" + y.toString();
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      //  System.out.println(mapForTemp.get(var_name).type + " " + mapForTemp.get(var_name).value );

      
      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      _ret = (R)(var_name);
      int_literal_conv = false;
      bool_literal_conv=false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      int_literal_conv = true;
      bool_literal_conv=true;
      String str;
      R _ret=null;
      R x,y;
      x = (R)n.f0.accept(this);
      n.f1.accept(this);
      y = (R)n.f2.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String type ="int";
      String value = x.toString() + "*" + y.toString();
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      //  System.out.println(mapForTemp.get(var_name).type + " " + mapForTemp.get(var_name).value );

      
      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      _ret = (R)(var_name);
      int_literal_conv = false;
      bool_literal_conv=false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      int_literal_conv = true;
      R exp1,exp2;
      exp1= (R)n.f0.accept(this);
      n.f1.accept(this);
      exp2=(R)n.f2.accept(this);
      

      t_count++;
      String var_name = "t"+t_count;
      String type ="int";
      
      
      
      
      String str = exp1.toString()+"["+exp2.toString()+"]";
      String value = str;
      Pair temp_pair = new Pair(type, value);
      mapForTemp.put(var_name,temp_pair);
      _ret = (R)var_name;

      //finalOutput.add(str);
      n.f3.accept(this);


      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);
      int_literal_conv = false;
      return _ret;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      R exp1;
      exp1=(R)n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String str = exp1.toString()+".length";
      _ret = (R)str;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   
  




/**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   
   


   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
    
   

   













   

//---------------------------------------------------------------------------
   public R visit(MessageSend n) {
      
      R _ret=null;
      int_literal_conv = true;
      bool_literal_conv=true;
      R alloc_exp,exp_lst;
      String methodName;
      alloc_exp =(R) n.f0.accept(this);
     // System.out.println("ALLOC: "+alloc_exp);
      n.f1.accept(this);
      n.f2.accept(this);
      methodName = n.f2.f0.toString();
      n.f3.accept(this);

      t_count++;
         String var_name = "t"+t_count;
         Pair tempPair = new Pair();

      String type = mapForMethods.get(methodName);
      String value = alloc_exp + "." + n.f2.f0.toString()+"(";
      

       exp_lst=(R)n.f4.accept(this);

       if (exp_lst==null) {
         value=value+")";
       }else{
         value=value+exp_lst+")";
       }



      

     
         
     
      tempPair.set(type,value);
      mapForTemp.put(var_name,tempPair);

      setAtIndex(ptr_declaration, type, var_name);
      String declarationString = var_name + " = " + value+";";
      finalOutput.add(declarationString);


         _ret = (R)(var_name);
         int_literal_conv = false;
         bool_literal_conv=false;
         //System.out.println("MS: "+_ret);
      return _ret;
   }







   public R visit(ExpressionList n) {
      R _ret=null;
      int_literal_conv = true;
      bool_literal_conv=true;
      _ret = (R)n.f0.accept(this);
      
      
      n.f1.accept(this);
      Vector<Node> vec=n.f1.nodes;
      String str=_ret.toString();

      for(int i=0;i<vec.size();i++){
         R  r= (R)vec.get(i).accept(this);
         //R  r= (R)vec.get(i).;
         String s=r.toString();
         str+=","+s;
      }

      _ret=(R)str;
      int_literal_conv = false;
      bool_literal_conv=false;
     // System.out.println("TAG10:"+msgString);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   // public R visit(ExpressionRest n) {
   //    R _ret=null;
   //    n.f0.accept(this);
   //    _ret=(R) n.f1.accept(this);
      
   //    msgString=msgString+","+_ret.toString();
   //  //   System.out.println("TAG12:"+msgString);
   //    // //.set(finalOutput.size()-1, str);
   //    //  _ret = (R)str;
      

     
   //    return _ret;
   // }


   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=(R) n.f1.accept(this);
   
      return _ret;
   }







   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;

      _ret = (R)n.f0.accept(this);
      //System.out.println("Primary : "+_ret);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
       n.f0.accept(this);
      // _ret = (R) n.f0;
      if(int_literal_conv == true) {
         t_count++;
         String var_name = "t"+t_count;
         String value,type;
         type = "int";
         value = n.f0.toString();
         Pair pair = new Pair(type,value);
         mapForTemp.put(var_name,pair);
         _ret = (R)var_name;

         setAtIndex(ptr_declaration, type, var_name);
         String declarationString = var_name + " = " + value+";";
         finalOutput.add(declarationString);
         return _ret;
      }
      else {
         _ret = (R) n.f0;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
     // _ret = (R) n.f0;
     if(bool_literal_conv == true) {
        t_count++;
        String var_name = "t"+t_count;
        String value,type;
        type = "boolean";
        value = n.f0.toString();
        Pair pair = new Pair(type,value);
        mapForTemp.put(var_name,pair);
        _ret = (R)var_name;

        setAtIndex(ptr_declaration, type, var_name);
        String declarationString = var_name + " = " + value+";";
        finalOutput.add(declarationString);
        return _ret;
     }
     else {
        _ret = (R) n.f0;
     }
     return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {R _ret=null;
      n.f0.accept(this);
     // _ret = (R) n.f0;
     if(bool_literal_conv == true) {
        t_count++;
        String var_name = "t"+t_count;
        String value,type;
        type = "boolean";
        value = n.f0.toString();
        Pair pair = new Pair(type,value);
        mapForTemp.put(var_name,pair);
        _ret = (R)var_name;

        setAtIndex(ptr_declaration, type, var_name);
        String declarationString = var_name + " = " + value+";";
        finalOutput.add(declarationString);
        return _ret;
     }
     else {
        _ret = (R) n.f0;
     }
     return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
     // if(br_exp == true) {
         _ret = (R)n.f0.toString();
     // }
     //System.out.println("id = " + _ret);
  
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      
      thisCounter++;
      String thisName="this"+thisCounter;

      String thatClassName=mapForContext.get(thisName);

      t_count++;
      String var_name = "t"+t_count;
      String value = "this";
      String type = thatClassName;
      Pair pair = new Pair(type,value);
     mapForTemp.put(var_name,pair);
     setAtIndex(ptr_declaration, type, var_name);
     String declarationString = var_name + " = " + value+";";
     finalOutput.add(declarationString);
       //  System.out.println(mapForTemp.get(var_name));
         _ret = (R)(var_name);

       
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      String str;
      int_literal_conv=true;
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      R exp = (R)n.f3.accept(this);
      n.f4.accept(this);
      str = "new int [" + exp.toString()+"]";
      //System.out.println("TAG3: "+str);
      int_literal_conv=false;
      _ret = (R)str;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      
      n.f0.accept(this);
      int_literal_conv = true;
      bool_literal_conv=true;
      n.f1.accept(this);
      bool_literal_conv=false;
      int_literal_conv = false;
      n.f2.accept(this);
      n.f3.accept(this);
      t_count++;
      String var_name = "t"+t_count;
      String value = "new" + " " + n.f1.f0.toString()+"()";
      String type = n.f1.f0.toString();
      Pair pair = new Pair(type,value);
     mapForTemp.put(var_name,pair);
     setAtIndex(ptr_declaration, type, var_name);
     String declarationString = var_name + " = " + value+";";
     finalOutput.add(declarationString);
       //  System.out.println(mapForTemp.get(var_name));
         _ret = (R)(var_name);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> ( MessageSend() | PrimaryExpression() )
    */
   public R visit(NotExpression n) {
      R _ret=null;
      String str;
      str = "!";
      n.f0.accept(this);
      _ret = (R)n.f1.accept(this);
      str = str + _ret.toString();
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
    
   public R visit(BracketExpression n) {
     
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f1.accept(this);
      n.f2.accept(this);
     //System.out.println("Brac: "+_ret);
      return _ret;
   }

}
