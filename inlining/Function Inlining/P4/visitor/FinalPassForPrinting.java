//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FinalPassForPrinting<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }
   public Map<String,Map<String,Stack<ArrayList<String>>>> functionBodyMap = new HashMap<>();
   public Map<String,Map<String,Map<String,Boolean>>> inlineMap = new HashMap<>();
   public Map<String,Map<String,Map<String,ArrayList<String>>>> mapOfCallGraph = new HashMap<>();
   public ArrayList<String> finalOutput = new ArrayList<>();
   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // for(int i=0;i<finalOutput.size();i++){
      //   System.out.println(finalOutput.get(i));
      // }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    String currentMethod;
    String currentClass;
    int varDeclsPtr;
   public R visit(MainClass n) {
      R _ret=null;
      currentClass = n.f1.f0.toString();
      currentMethod = "main";
      String inputString;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      inputString = "class "+ n.f1.f0.toString()+" {";
      finalOutput.add(inputString);
      inputString = "public static void main(String[] "+n.f11.f0.toString()+") {";
    finalOutput.add(inputString);
    varDeclsPtr = finalOutput.size();
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      finalOutput.add("}");
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      String inputString;
      currentClass = n.f1.f0.toString();
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      inputString = "class "+n.f1.f0.toString()+"{";
      finalOutput.add(inputString);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      String inputString;
      currentClass = n.f1.f0.toString();

      inputString = "class "+n.f1.f0.toString()+" extends "+n.f3.f0.toString()+"{";
      finalOutput.add(inputString);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      String varType = (String)n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String varDeclString = varType +" "+n.f1.f0.toString()+";";
      finalOutput.add(varDeclString);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      String inputString;
      String funcType;
      n.f0.accept(this);
      funcType = (String)n.f1.accept(this);
      currentMethod = n.f2.f0.toString();
      n.f2.accept(this);
      n.f3.accept(this);
      inputString = "public "+funcType+" "+n.f2.f0.toString()+"(";//+formalParameters+") {";
      finalOutput.add(inputString);
      n.f4.accept(this);
      inputString = finalOutput.getLast();
      inputString = inputString+"){";
      finalOutput.set(finalOutput.size()-1, inputString);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      varDeclsPtr = finalOutput.size();
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      inputString = "return "+n.f10.f0.toString()+";";
      finalOutput.add(inputString);
      finalOutput.add("}");
      n.f11.accept(this);
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      String formPars,s;;

      formPars = (String)n.f0.accept(this);
      s = (String)n.f1.accept(this);
      //System.out.println("TAG 3 "+s);
      if(s == null){
        s = "";
      }
      s = formPars+s;
     // System.out.println("TAG1 : "+s);
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String typeVar;
      String s,s2;
      typeVar = (String)n.f0.accept(this);
      n.f1.accept(this);
      s2 = finalOutput.get(finalOutput.size()-1);
      if(formRest == true){
         s2 = s2 + ",";
      }
      s = typeVar +" "+n.f1.f0.toString();
      
      s2 = s2+s;
      finalOutput.set(finalOutput.size()-1, s2);
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    boolean formRest = false;
   public R visit(FormalParameterRest n) {
      R _ret=null;
      formRest = true;
      String s1,s2;
      n.f0.accept(this);
      n.f1.accept(this);
    
      // s1 = finalOutput.getLast();
      // s1 = s1+",";
      // finalOutput.set(finalOutput.size()-1, s1);
      formRest = false;
      //System.out.println("TAG12 : "+s1);

    //  _ret = (R)s1;
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String s = "int []";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      String s = "boolean";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      String s = "int";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      finalOutput.add("{");
      n.f1.accept(this);
      n.f2.accept(this);
      finalOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String rhsExpr = (String)n.f2.accept(this);
      n.f3.accept(this);
      String inputString = n.f0.f0.toString()+" = "+rhsExpr+";";
      finalOutput.add(inputString);
      return _ret;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      String inputString = n.f0.f0.toString()+"["+n.f2.f0.toString()+"]"+ " = "+n.f5.f0.toString()+";";
      finalOutput.add(inputString);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      String inputString = n.f0.f0.toString()+"."+n.f2.f0.toString()+" = "+n.f4.f0.toString()+";";
      finalOutput.add(inputString);

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String inputString = "if("+n.f2.f0.toString()+")";
      finalOutput.add(inputString);

      n.f4.accept(this);
      inputString = "else";
      finalOutput.add(inputString);

      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String inputString = "while("+n.f2.f0.toString()+")";
      finalOutput.add(inputString);

      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n) {
      R _ret=null;
      String e1,e2,e3;
      String inputString;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      e1 = (String)n.f4.accept(this);
      n.f5.accept(this);
      e2 = (String)n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      e3 = (String)n.f10.accept(this);
      n.f11.accept(this);
      inputString = "for("+n.f2.f0.toString()+" = "+e1+";"+e2+";"+n.f8.f0.toString()+" = "+e3+")";
      finalOutput.add(inputString);

      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String inputString = "System.out.println("+n.f2.f0.toString()+");";
      finalOutput.add(inputString);

      return _ret;
   }

   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
    boolean inlineAnn = false;
   public R visit(MessageSendStatement n) {
      R _ret=null;
      String inlineStr = (String)n.f0.accept(this);
      if(inlineStr == null){
         inlineAnn = false;
      }
      else if(inlineStr.equals("INLINE")){
         inlineAnn = true;
      }
      n.f1.accept(this);
      args.clear();
      inlineAnn = false;
      return _ret;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
    boolean inlineable = false;
   public R visit(VoidMessageSendStmt n) {
      R _ret=null;
      String callStmt;
      String inputString;
      callStmt = (String)n.f0.accept(this);
      n.f1.accept(this);
      if(inlineable == false || inlineAnn == false){
         inputString = callStmt+";";
         finalOutput.add(inputString);
      }
      if(inlineable == true && inlineAnn == true){
         Map<String,Map<String,ArrayList<String>>> callGMethMap = mapOfCallGraph.get(currentClass);
         Map<String,ArrayList<String>> callList = callGMethMap.get(currentMethod);
         ArrayList<String> calledFuncList = callList.get(classN+"."+funcN);
         String callSite = calledFuncList.get(0);
         String[] parts = callSite.split("\\.");
         String className = parts[0];
         String functionName = parts[1];
         String regex = "^(\\w+)\\.";

         Pattern pattern = Pattern.compile(regex);
         Matcher matcher = pattern.matcher(callStmt);
         if (matcher.find()) {
            // The calling object is in the first group
            //System.out.println("Calling object: " + matcher.group(1));
        }
         //System.out.println("th1: "+ callSite);
         inlineBody(className, functionName,args,"",matcher.group(1));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n) {
      R _ret=null;
      String callStmt;
      String inputString;
      n.f0.accept(this);
      n.f1.accept(this);
      callStmt = (String)n.f2.accept(this);
      if(inlineAnn == false || inlineable == false){
         inputString = n.f0.f0.toString()+" = " + callStmt+";";
         finalOutput.add(inputString);
      }
      if(inlineable == true && inlineAnn == true){
         Map<String,Map<String,ArrayList<String>>> callGMethMap = mapOfCallGraph.get(currentClass);
         Map<String,ArrayList<String>> callList = callGMethMap.get(currentMethod);
         ArrayList<String> calledFuncList = callList.get(classN+"."+funcN);
         String callSite = calledFuncList.get(0);
         String[] parts = callSite.split("\\.");
         String className = parts[0];
         String functionName = parts[1];

         
         String regex = "^(\\w+)\\.";

         Pattern pattern = Pattern.compile(regex);
         Matcher matcher = pattern.matcher(callStmt);
         if (matcher.find()) {
            // The calling object is in the first group
            //System.out.println("Calling object: " + matcher.group(1));
        }
         //System.out.println("th1: "+ callSite);
         inlineBody(className, functionName,args,n.f0.f0.toString(),matcher.group(1));
         
      }
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret = (R)n.f1.toString();
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+"&"+n.f2.f0.toString();
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+"<"+n.f2.f0.toString();
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+"+"+n.f2.f0.toString();
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+"-"+n.f2.f0.toString();
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+"*"+n.f2.f0.toString();
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String expr = n.f0.f0.toString()+"["+n.f2.f0.toString()+"]";
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String expr = n.f0.f0.toString()+".length";
      _ret = (R)expr;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
    String classN,funcN;
    ArrayList<String> args = new ArrayList<>();
   public R visit(MessageSend n) {
      R _ret=null;
      String s1;
      String argList;
      s1 = (String)n.f0.accept(this);
      classN = s1;
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      funcN = n.f2.f0.toString();
      String funcCall = s1+"."+n.f2.f0.toString();
      Map<String,Map<String,Boolean>> methodMap = inlineMap.get(currentClass);
      Map<String,Boolean> callSiteMap = methodMap.get(currentMethod);
      //System.out.println("tag1: "+callSiteMap);
      //System.out.println(methodMap);
      //System.out.println("call site: "+funcCall);
      if(inlineAnn == true){
         if(callSiteMap.get(funcCall) == null){
            inlineable = false;
         }
         else
            inlineable = callSiteMap.get(funcCall);
      }
      argList = (String)n.f4.accept(this);
      n.f5.accept(this);
      if(argList == null){
         argList = "";
       }
       String stmt = s1+"."+n.f2.f0.toString()+"("+argList+")";
       _ret = (R)stmt;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n) {
      R _ret=null;
      String argRest;
      String argList;
      n.f0.accept(this);
      if(n.f0.f0 != null)
        args.add(n.f0.f0.toString());
      argRest = (String)n.f1.accept(this);

      if(argRest == null){
         argRest = "";
       }
       argList = n.f0.f0.toString()+argRest;
       _ret = (R)argList;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n) {
      R _ret=null;
      String argRest;
      n.f0.accept(this);
      n.f1.accept(this);
      argRest = ","+n.f1.f0.toString();
      args.add(n.f1.f0.toString());
      _ret = (R)argRest;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String s = "new int ["+n.f3.f0.toString()+"]";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String s = "new "+n.f1.f0.toString()+"()";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String s = "!"+n.f1.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String dotExpr = n.f0.f0.toString() +"."+n.f2.f0.toString();
      _ret = (R)dotExpr;
      return _ret;
   }
   public void inlineBody(String className,String funcName,ArrayList<String> argList,String retId,String thisVar){
      finalOutput.add("{");
      Map<String,Stack<ArrayList<String>>> inlineMethodMap = functionBodyMap.get(className);
      Stack<ArrayList<String>> methodBodyStack = inlineMethodMap.get(funcName);
      ArrayList<String> formalVarDeclaration = methodBodyStack.get(0);
      ArrayList<String> varDeclarations = methodBodyStack.get(1);
      ArrayList<String> funcBody = methodBodyStack.get(2);
      for(int i=0;i<formalVarDeclaration.size();i++){
         String inputString = formalVarDeclaration.get(i);
         finalOutput.add(varDeclsPtr, inputString);
      }
      for(int i=0;i<varDeclarations.size();i++){
         String inputString = varDeclarations.get(i);
         finalOutput.add(varDeclsPtr, inputString);
      }
      String reg = "\\b([A-Za-z_][A-Za-z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;";
      String thisVarString = formalVarDeclaration.get(1);
      Pattern pattern1 = Pattern.compile(reg);
      Matcher matcher1 = pattern1.matcher(thisVarString);
      if(matcher1.find()){
         String varname1 = matcher1.group(2);
         String outString = varname1 + " = " + thisVar+";";
         finalOutput.add( outString);
      }
      if(!retId.equals("") ){
         for(int i=2;i<formalVarDeclaration.size();i++){
            String inputString = formalVarDeclaration.get(i);
            String regex = "\\b([A-Za-z_][A-Za-z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(inputString);
            if(matcher.find()){
               String varname = matcher.group(2);
          //     System.out.println("t1: "+varname+" " +argList.get(i-1));
               String outString = varname + " = " + argList.get(i-2)+";";
               finalOutput.add(outString);
            // System.out.println("T2: "+varname);
               
            }
         }
      }
      else {
         //.out.println("form: "+formalVarDeclaration);
         for(int i=2;i<formalVarDeclaration.size();i++){
            String inputString = formalVarDeclaration.get(i);
            String regex = "\\b([A-Za-z_][A-Za-z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(inputString);
           // System.out.println("arglist: "+argList);
           // System.out.println("forma: "+formalVarDeclaration);
            if(matcher.find()){
               String varname = matcher.group(2);
            //   System.out.println("t1: "+varname+" " +argList.get(i));
           // System.out.println("formal dec size: "+formalVarDeclaration.size()+" arglist size: "+argList.size());
               String outString = varname + " = " + argList.get(i-2)+";";
               finalOutput.add(outString);
            // System.out.println("T2: "+varname);
               
            }
         }
      }
      for(int i=0;i<funcBody.size();i++){
         String inputString = funcBody.get(i);
         finalOutput.add(inputString);
      }
      finalOutput.add("}");
      if(!retId.equals("")){
         String retVar = formalVarDeclaration.get(0);
         String regex = "\\b([A-Za-z_][A-Za-z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(retVar);
            if(matcher.find()){
               String varname = matcher.group(2);
              String outString = retId + " = " + varname+";";
               finalOutput.add(outString);
            }

      
      }
   }
   public void writeToFile(){
      //  String fileName = "output.java";
        for(int i=0;i<finalOutput.size();i++){
          System.out.println(finalOutput.get(i));
           
        }
  }
}
