
//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SixthPassForFunctionBody<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
     // addThisParam();
     // System.out.println(functionBodyMap);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    public Map<String,Map<String,Stack<ArrayList<String>>>> functionBodyMap = new HashMap<>();
   
    String currentClass;
    String currentMethod;
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      currentClass = n.f1.f0.toString();
      currentMethod = "main";
      Map<String,Stack<ArrayList<String>>> methodDuncMap = new HashMap<>();
      Stack<ArrayList<String>> funcBody = new Stack<>();
      ArrayList<String> s1 = new ArrayList<>();
      ArrayList<String> s2 = new ArrayList<>();
      ArrayList<String> s3 = new ArrayList<>();
      funcBody.add(s1);
      funcBody.add(s2);
      funcBody.add(s3);
      methodDuncMap.put(currentMethod,funcBody);
      functionBodyMap.put(currentClass, methodDuncMap);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      
      varCount++;
      count = 0;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      currentClass = n.f1.f0.toString();
      Map<String,Stack<ArrayList<String>>> methodDuncMap = new HashMap<>();
      functionBodyMap.put(currentClass, methodDuncMap);

      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    int varCount = 1;
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      currentClass = n.f1.f0.toString();
      Map<String,Stack<ArrayList<String>>> methodDuncMap = new HashMap<>();
      functionBodyMap.put(currentClass, methodDuncMap);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    boolean typeCheck = false;
   public R visit(VarDeclaration n) {
      R _ret=null;
      typeCheck = true;
      String typeOfVar = (String)n.f0.accept(this);
      typeCheck = false;
      n.f1.accept(this);
      n.f2.accept(this);
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> funcBody = methodMap.get(currentMethod);
        String varDecl = typeOfVar+" _"+n.f1.f0.toString()+String.valueOf(varCount)+";";
        
        ArrayList<String> varDecls = funcBody.get(1);
        varDecls.add(varDecl);
        
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      String retType;
      retType = (String)n.f1.accept(this);
      n.f2.accept(this);
      currentMethod = n.f2.f0.toString();
      Stack<ArrayList<String>> funcBody = new Stack<>();
      ArrayList<String> s1 = new ArrayList<>();
      ArrayList<String> s2 = new ArrayList<>();
      ArrayList<String> s3 = new ArrayList<>();
      ArrayList<String> s4 = new ArrayList<>();
      String retVar = retType+" _ret"+String.valueOf(varCount)+";";
      String classType = currentClass;
      String  varDecl = classType+ " _this"+String.valueOf(varCount)+";";

     // String _thisVar = "_this"+String.valueOf(varCount)+";";
      s1.add(retVar);
      s1.add(varDecl);
         //String thisExpalloc = "_this"+String.valueOf(varCount)+" =  "+";";
        // System.out.println("came here"+thisExpalloc);
       //  s3.add(thisExpalloc);
     // s1.add(_thisVar);
      funcBody.add(s1);
      funcBody.add(s2);
      funcBody.add(s3);

      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      methodMap.put(currentMethod, funcBody);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      String inputString = "_ret"+String.valueOf(varCount)+" = _" + n.f10.f0.toString()+String.valueOf(varCount)+";";
      s3.add(inputString);
      varCount++;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String typeOfVar;
      typeOfVar = (String)n.f0.accept(this);
      n.f1.accept(this);
      Map<String,Stack<ArrayList<String>>> m1 = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = m1.get(currentMethod);
      String varDecl = typeOfVar +" _" + n.f1.f0.toString()+String.valueOf(varCount)+";";
      ArrayList<String> ar = s.get(0);
      ar.add(varDecl);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret = (R)"int []";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)n.f0.toString();

      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      ar.add("{");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      ar.add("}");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
    int count =0;
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String rhsExp;
      rhsExp = (String) n.f2.accept(this);
      n.f3.accept(this);
      String lhsVar = "_"+n.f0.f0.toString()+String.valueOf(varCount);
      String stmt = lhsVar +" = " + rhsExp+";";
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      ar.add(stmt);
      return _ret;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      String arrAssStmt;
      arrAssStmt = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"["+"_"+n.f2.f0.toString()+String.valueOf(varCount)+"] = "+"_"+n.f5.f0.toString()+String.valueOf(varCount)+";";
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      ar.add(arrAssStmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      String fieldAss;
      fieldAss = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"."+"_"+n.f2.f0.toString()+String.valueOf(varCount)+" = "+"_"+n.f4.f0.toString()+String.valueOf(varCount)+";";
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      ar.add(fieldAss);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String ifLine = "if("+"_"+n.f2.f0.toString()+String.valueOf(varCount)+")";
      ar.add(ifLine);
      n.f4.accept(this);
      n.f5.accept(this);
      String elseLine = "else";
      ar.add(elseLine);
      n.f6.accept(this);
      
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      String whileStmt = "while("+"_"+n.f2.f0.toString()+String.valueOf(varCount)+")";
      ar.add(whileStmt);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
    boolean forStmtCheck = false;
   public R visit(ForStatement n) {
    forStmtCheck = true;
      R _ret=null;
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      String forStmt;
      String expr1;
      String expr2,expr3;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      expr1 = (String)n.f4.accept(this);
      n.f5.accept(this);
      expr2 = (String)n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      expr3 = (String)n.f10.accept(this);
      n.f11.accept(this);
      forStmtCheck = false;
      forStmt = "for( _"+n.f2.f0.toString()+String.valueOf(varCount)+"="+expr1+";"+expr2+"; _"+n.f8.f0.toString()+String.valueOf(varCount)+" = "+expr3+")";
      ar.add(forStmt);
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      String prntStmt;
      prntStmt = "System.out.println( _"+n.f2.f0.toString()+String.valueOf(varCount)+" );";
      ar.add(prntStmt);
      return _ret;
   }

   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
   public R visit(MessageSendStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(VoidMessageSendStmt n) {
      R _ret=null;
      String msgSendstmt;
      msgSendstmt = (String) n.f0.accept(this);
      n.f1.accept(this);
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      msgSendstmt = msgSendstmt + ";";
      ar.add(msgSendstmt);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n) {
      R _ret=null;
      String retString;
      Map<String,Stack<ArrayList<String>>> methodMap = functionBodyMap.get(currentClass);
      Stack<ArrayList<String>> s = methodMap.get(currentMethod);
      ArrayList<String> ar = s.peek();
      n.f0.accept(this);
      n.f1.accept(this);
      retString = (String) n.f2.accept(this);
      retString = "_"+n.f0.f0.toString()+String.valueOf(varCount)+" = "+retString+";";
      ar.add(retString);
      n.f3.accept(this);

      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"&"+"_"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"<"+"_"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"+"+"_"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"-"+"_"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"*"+"_"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"["+"_"+n.f2.f0.toString()+String.valueOf(varCount)+"]";
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String exp = "_"+n.f0.f0.toString()+String.valueOf(varCount)+".length";
      _ret = (R)exp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
    boolean msgSend = false;
   public R visit(MessageSend n) {
    msgSend = true;
      R _ret=null;
      String exp;
      String argList;
      exp = (String)n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      argList = (String)n.f4.accept(this);
    //  System.out.println("ArgList: "+argList);
      n.f5.accept(this);
      String stmt;
      if(argList == null){
        argList = "";
      }
      // while(i<args.size()) {
      //    argList = argList +","+args.get(i);
      //    args.remove(i);
      //    i++;
      // }
    //  System.out.println("Argrest are: "+args);
       for(int i=0;i<args.size();i++){
         argList = argList + "," + args.get(i);
       }
      stmt = exp+"."+n.f2.f0.toString()+"("+argList+")";
      args.clear();
      _ret = (R)stmt;
      msgSend = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n) {
      R _ret=null;
      String argRest;
      String argList;
      n.f0.accept(this);
      argRest = (String)n.f1.accept(this);
      if(argRest == null){
        argRest = "";
      }
     // System.out.println("Argrest: "+argRest);
      argList = "_"+n.f0.f0.toString()+String.valueOf(varCount)+argRest;
      _ret = (R)argList;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
    ArrayList<String> args = new ArrayList<>();
   public R visit(ArgRest n) {
      R _ret=null;
      String argRest;
      n.f0.accept(this);
      n.f1.accept(this);
     // argRest = ", _"+n.f1.f0.toString()+String.valueOf(varCount);
     argRest = "_"+n.f1.f0.toString()+String.valueOf(varCount);
     args.add(argRest);
      _ret = (R)argRest;
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      _ret = n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      String s = n.f0.toString();
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      String r;
    //  if(forStmtCheck == true || msgSend == true){
          r = "_"+n.f0.toString()+String.valueOf(varCount);
   // }
  //  else {
         if(typeCheck == true)
            r = n.f0.toString();

     // }
      _ret = (R)r;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      String s = "_this"+String.valueOf(varCount);
      _ret = (R)s;
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      String s = "new "+"int "+" [_"+n.f3.f0.toString()+String.valueOf(varCount)+"]";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      String s = "new "+n.f1.f0.toString()+"()";
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String s = "!_"+n.f1.f0.toString()+String.valueOf(varCount);
      _ret = (R)s;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String rhsExpression = "_"+n.f0.f0.toString()+String.valueOf(varCount)+"._"+n.f2.f0.toString()+String.valueOf(varCount);
      _ret = (R)rhsExpression;
      return _ret;
   }
   // public void addThisParam(){
   //    fun
   // }

}
